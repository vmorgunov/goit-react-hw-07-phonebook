{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","service/contactsAPI.js","redux/contacts/contacts-action.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-operation.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["Form","styled","form","Label","label","Input","input","Button","button","fetchContacts","a","axios","get","data","addContacts","id","name","number","contact","post","deleteContacts","delete","defaults","baseURL","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","getItems","state","contacts","items","getFilteredContacts","createSelector","filter","normalizedContacts","toLowerCase","includes","ContactForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","shortid","generate","handleInputChange","e","currentTarget","value","handleFormReset","onSubmit","preventDefault","find","alert","conctacsAction","addContact","type","pattern","title","required","onChange","Titel","h2","List","ul","Item","li","ContactList","useEffect","onDeleteContacts","deleteContact","map","onClick","Container","section","h1","Section","titel","children","connect","App","createReducer","contactsAction","_","payload","loading","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1b8f4a9.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  margin-left: 10px;\n  margin-bottom: 10px;\n  border: solid 1px black;\n  padding: 15px;\n  width: 300px;\n`;\n\nexport const Label = styled.label``;\n\nexport const Input = styled.input`\n  display: flex;\n  margin: 10px 0;\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 15px;\n  padding: 10px;\n  border-radius: 10px;\n  border: none;\n  cursor: pointer;\n  &:hover {\n    background-color: #bcb7b7;\n  }\n`;\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport async function fetchContacts() {\r\n  const { data } = await axios.get(`/contacts`);\r\n  return data;\r\n}\r\n\r\nexport async function addContacts(id, name, number) {\r\n  const contact = {\r\n    id,\r\n    name,\r\n    number,\r\n  };\r\n  const { data } = await axios.post(`/contacts`, contact);\r\n  return data;\r\n}\r\n\r\nexport async function deleteContacts(id) {\r\n  const { data } = await axios.delete(`/contacts/${id}`);\r\n  return data;\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { createSelector } from 'reselect';\n\nexport const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getItems, getFilter],\n\n  (contacts, filter) => {\n    const normalizedContacts = filter.toLowerCase();\n\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedContacts),\n    );\n    return filteredContacts;\n  },\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact, getItems } from 'redux/contacts';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getItems);\n  const id = shortid.generate();\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const duplicate = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (duplicate) {\n      alert(`${name} is already in contacts`);\n      handleFormReset();\n      return;\n    }\n    dispatch(addContact(id, name, number));\n    handleFormReset();\n  };\n\n  const handleFormReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleInputChange}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={handleInputChange}\n        />\n      </Label>\n      <Button type=\"submit\">Add contacts</Button>\n    </Form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n\nexport default ContactForm;\n","import {\r\n  addContacts,\r\n  deleteContacts,\r\n  fetchContacts,\r\n} from 'service/contactsAPI';\r\nimport * as conctacsAction from './contacts-action';\r\n\r\nconst fetchContact = () => async dispatch => {\r\n  dispatch(conctacsAction.fetchContactRequest());\r\n\r\n  try {\r\n    const data = await fetchContacts();\r\n    dispatch(conctacsAction.fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(conctacsAction.fetchContactError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (id, name, number) => async dispatch => {\r\n  dispatch(conctacsAction.addContactRequest());\r\n\r\n  try {\r\n    const data = await addContacts(id, name, number);\r\n    dispatch(conctacsAction.addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(conctacsAction.addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = id => async dispatch => {\r\n  dispatch(conctacsAction.deleteContactRequest());\r\n  try {\r\n    await deleteContacts(id);\r\n    dispatch(conctacsAction.deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(conctacsAction.deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport { fetchContact, addContact, deleteContact };\r\n","import styled from '@emotion/styled';\n\nexport const Titel = styled.h2`\n  margin-bottom: 10px;\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 15px;\n  border-radius: 10px;\n  border: none;\n  cursor: pointer;\n\n  background-color: transparent;\n  transition: all 0.2s ease-in-out;\n\n  &:hover {\n    transform: scale(1.3);\n  }\n`;\n\nexport const List = styled.ul`\n  padding: 0;\n`;\n\nexport const Item = styled.li``;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Titel, Button, List, Item } from './ContactList.styled';\nimport { BsFillPersonFill, BsFillTrashFill } from 'react-icons/bs';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  getFilteredContacts,\n  deleteContact,\n  fetchContact,\n} from 'redux/contacts/';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\n\n  const onDeleteContacts = id => dispatch(deleteContact(id));\n  return (\n    <>\n      <Titel>Contacts</Titel>\n      <List>\n        {contacts.map(({ id, name, number }) => (\n          <Item key={id} id={id}>\n            <BsFillPersonFill />\n            <span>{name}:</span> <span>{number}</span>\n            <Button\n              type=\"button\"\n              onClick={() => {\n                onDeleteContacts(id);\n              }}\n            >\n              <BsFillTrashFill />\n            </Button>\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.section``;\n\nexport const Titel = styled.h1`\n  font-size: 30px;\n  margin: 10px 0;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, Titel } from './Section.styled';\n\nconst Section = ({ titel, children }) => {\n  return (\n    <Container>\n      <Titel>{titel}</Titel>\n      {children}\n    </Container>\n  );\n};\n\nSection.propTypes = {\n  titel: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  margin-left: 10px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n","import React from 'react';\nimport { Label, Input } from './Filter.styled';\nimport { connect } from 'react-redux';\nimport { changeFilter } from 'redux/contacts';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <Label>\n      Filter contacts by name\n      <Input type=\"text\" value={value} onChange={onChange} />\n    </Label>\n  );\n};\n\nconst mapStateToProps = ({ contacts }) => ({\n  value: contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Section from 'components/Section';\nimport Filter from 'components/Filter';\n\nexport default function App() {\n  return (\n    <>\n      <Section titel=\"Phonebook\">\n        <ContactForm />\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as contactsAction from './contacts-action';\n\nconst initialState = [];\n\nconst items = createReducer(initialState, {\n  [contactsAction.fetchContactSuccess]: (_, { payload }) => payload,\n  [contactsAction.addContactSuccess]: (state, { payload }) => [\n    ...state,\n    payload,\n  ],\n  [contactsAction.deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [contactsAction.fetchContactRequest]: () => true,\n  [contactsAction.fetchContactSuccess]: () => false,\n  [contactsAction.fetchContactError]: () => false,\n  [contactsAction.addContactRequest]: () => true,\n  [contactsAction.addContactSuccess]: () => false,\n  [contactsAction.addContactError]: () => false,\n  [contactsAction.deleteContactRequest]: () => true,\n  [contactsAction.deleteContactSuccess]: () => false,\n  [contactsAction.deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [contactsAction.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import contactsReducer from 'redux/contacts/contacts-reducer';\nimport { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst store = configureStore({\n  reducer: { contacts: contactsReducer },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'App';\nimport store from 'redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}